---
title: "IWLS"
author: "Jakub SzypuÅ‚a, Bartosz RoÅ¼ek"
format: html
editor: visual
---

```{python setup}

import numpy as np
import pandas as pd
from numpy.linalg import inv
np.set_printoptions(suppress = True)

```

```{python}
class IWLS:

    def __init__(self):
        self.AIC = None
        self.BIC = None
        self.log_likelihood = []
        self.log_likelihood_path = []
        self.iterations = 0
        self.beta = None

    def fit(self, X, y, max_iter = 100, delta_limit = 0.01, standarize = True, interaction:np.ndarray = None):

        X = X.copy()

        if interaction is not None:
          for row in interaction_matrix:
            first_col = row[0]
            second_col = row[1]
            X[first_col] = X[first_col] * X[second_col]
            X.rename(columns={first_col: first_col + "*" + second_col}, inplace=True)
            X.drop(columns=[second_col], inplace = True)

        was_df = isinstance(X, pd.DataFrame)
        if was_df:
            colnames = X.columns.tolist()
            X = X.to_numpy()

        if isinstance(y, pd.DataFrame):
            y = y.to_numpy()

        if(standarize):
            X = (X - np.mean(X, axis=0)) / np.std(X,axis=0)

        if(self.beta is None):
            beta = np.zeros(X.shape[1])
            p = self.logit_inv(X @ beta)
            iteration = 0

        delta = 10000
        self.log_likelihood_path.append(self.Log_likelihood(p,y))
        while delta > delta_limit and iteration < max_iter:
            iteration += 1
            W = np.diag(p * (1-p))
            z = X @ beta + inv(W) @ (y - p)
            beta = inv(X.T @ W @ X) @ X.T @ W @ z
            p = self.logit_inv(X @ beta)

            self.log_likelihood_path.append(self.Log_likelihood(p,y))
            delta = np.abs(self.log_likelihood_path[iteration] - self.log_likelihood_path[iteration - 1])

        self.iterations = iteration
        self.log_likelihood = self.log_likelihood_path[iteration]

        if was_df:
            self.beta = pd.DataFrame({"coeff" : beta}, index=colnames)
        else:
            self.beta = beta

    @staticmethod
    def Log_likelihood(p, y):
    
        # Log-likelihood of logistic regression
        L = y * np.log(p) + (1 - y) * np.log(1 - p)
        return sum(L)
      
    @staticmethod
    def logit_inv(x):
        return 1/(1+np.exp(-x))
    

```

```{python}

data = '/home/bartoszrozek/Documents/Studia/AML/data/airquality.csv'

df = pd.read_csv(data)

X = df.drop(['Ozone'], axis=1)

y = df['Ozone'].reset_index(drop=True)

```

```{python}

interaction_matrix = np.array([['Solar.R', 'Wind'], ['Temp', 'Day']])
iwls = IWLS()

iwls.fit(X, y, standarize=False)

iwls.beta

```

```{python}



```

```{r}

data <- '/home/bartoszrozek/Documents/Studia/AML/data/airquality.csv'

df <- read.csv(data)

X <- df[,-1] %>% as.matrix()

y <- df[,1]

library(foehnix)

iwls_logit(X, y, standardize = FALSE)

```